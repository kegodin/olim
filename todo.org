* <2019-01-09 Wed>
  - [X] Check that plots are fixed
  - [X] Fix plotting on tessier (just run in ipython for now)
  - [X] Get stats working again
  - [X] Use stats as baseline to see where we're at with skipping
  - [X] Run basic vs. olim6 on armitage & tessier

* <2019-01-10 Thu>
  - [X] olim* direct solver tri skipping
  - [X] Writeup: new skipping idea

* <2019-01-11 Fri>
  - [X] Make sure all plots use figsize=(6.5, *) and font size = 8
  - [X] Script: extract task % from profile data
  - [X] Plot: task %
  - [ ] Combine and automate the previous two
  - [ ] olimhu skipping
  - [ ] Writeup: "implementation stats"

* <2019-01-12 Sat>
  - [X] Finish optimizing Lagrange multipliers
  - [ ] Use MATLAB to generate some tests for `should_skip'

* Optimization Todo
  1. [ ] Getting to the point where probably the simplest thing is to
     just delete the "update" classes and move everything into the
     olim & olim3d classes as member functions...
  2. [ ] Since triangle updates are so much cheaper than SQP updates,
     a better approach to solving unconstrained optimization problems
     might be to implement the following constrained algorithm:
     1) Do each triangle update + lagmults & skipping
     2) Do interior solve only if the above fails
     3) Could try a regular old Newton iteration for the interior solve...
     If we did this, we wouldn't need to do the fussy triangle
     skipping when we use the direct solver: we would only use it for
     the interior point case, since after solving the three triangle
     updates, we would know definitively if the optimum is in the
     interior
  3. [ ] Remove second argument from `sqp_bary': i.e., use only one
     `x' argument which contains the initial iterate to begin and is
     overwritten with the optimum at the end. When we do this, we can
     also:
     - [ ] Have `sqp_bary' return its error code in an enum
     - [ ] Just take the updates::info<d> struct as a reference
       instead of separate parameters
  4. [ ] Don't actually need to store qr_wkspc in cost_functor...
  5. [ ] The octant optimization is worth doing: without it, we end up
     wasting time accessing `inds' and checking if the indices are
     equal to `parent'
  6. [ ] Optimize memory to the point that we can run 1025^3 jobs on a
     computer with 64GB of memory
  7. [ ] Use Theorem 3.7 to evaluate instead of Theorem 3.6?
  8. [ ] Reduce line count in tests using generic lambdas...
  9. [ ] Remove `in_bounds' check by using a (n+2)^3 grid---this
     actually does appear to take a significant amount of time...
     - [ ] Add a "barrier" state and just set the boundary to
       "barrier" to implement this without having to think too hard
       about it
  10. [ ] Reduce branching by replacing "if (nb[i]) {...}" with a
      precomputed array of indices to valid neighbors
  11. [ ] Convert to SOA
  12. [ ] Split fac and non-fac update functions
  13. [ ] Re-enable skipping and see if we can get any speedup
  14. [ ] Lag mults
      - [ ] Add initial lambda argument
      - [ ] Warm start using triangle update arglam
      - [ ] Check lagmults inside of tetra
  15. [ ] Make plots and ensure that they agree with old results
  16. [ ] Try to get olim6_rhr to run as fast as basic_marcher_3d
      - currently pretty damn close... olim6_rhr is about 15% slower
  17. [ ] Remove STL headers
  18. [ ] Remove macros
      - [ ] P*** macros -> b'***' literals
  19. [ ] Speed up tests
      - Try different test library?
        - cgreen seemed fine and was written in C
  20. [ ] Try disabling exceptions
  21. [ ] Replace `malloc' and `new's with "operator new" (minimum
      number of includes and no unnecessary calling of ctors via new)
  22. [ ] Global p_fac -> pf
  23. [ ] Global s_fac -> sf
  24. [ ] Replace pybind11 with Cython
  25. [ ] Use templates to remove macros from updates.tri
  26. [X] Fix the bugs
  27. [X] Add direct solve for non-bv
  28. [X] Correctly set lambda in tri_bv for one-point updates
  29. [X] Add command-line arguments to Python plotting scripts
  30. [X] Try making mp0's `eval' mp1's `eval' to see if that fixes
      the symmetry problem
      - symmetry problem fixed by switching to direct solve! probably
        the reason this was happening was because we were minimizing a
        surrogate function

# Local Variables:
# indent-tabs-mode: nil
# End:
