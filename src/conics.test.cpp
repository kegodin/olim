#include "test.hpp"

#include <cstdio>

#include "conics.hpp"

void intersect_conics_works_1() {
  double P[8], Pgt[] = {
    0.186201112405466,
    0.5330127760211535,
    0.3534158411042917,
    0.2027970328220982,
    0.3132508255623735,
    0.463869633844569,
    0.4804655542612019,
    0.1336538906455123,
  };
  double Q1[6] = {3.955, 3.955, 0.955, -3.955, -1.955, 0.9775};
  double Q2[6] = {0.68, 3.68, 3.68, -1.68, -3.68, 0.84};

  int n;
  intersect_conics(Q1, Q2, P, n);
  IS_TRUE(n == 4);
  for (int i = 0; i < 8; ++i) {
    IS_APPROX_EQUAL(P[i], Pgt[i]);
  }
}

void intersect_conics_works_2() {
  double P[8];
  int n;
  {
    double Q1[] = {-4, -4, -1, 4, 2, -1};
    double Q2[] = {-0.863892, -3.86389, -3.86389, 1.86389, 3.86389, -0.931946};
    double Pgt[] = {
      0.2819503278353713, 0.4360993443292574,
      0.384716183642255, 0.2305676327154899,
      0.2819503278353713, 0.4360993443292574,
      0.384716183642255, 0.2305676327154899,
    };
    intersect_conics(Q1, Q2, P, n);
    IS_TRUE(n == 4);
    for (int i = 0; i < 8; ++i) {
      IS_APPROX_EQUAL(P[i], Pgt[i]);
    }
  }
  {
    double Q1[] = {-3.86389, -3.86389, -0.863892, 3.86389, 1.86389, -0.931946};
    double Q2[] = {-1, -4, -4, 2, 4, -1};
    double Pgt[] = {
      0.2305676327154899, 0.384716183642255,
      0.4360993443292574, 0.2819503278353713,
      0.2305676327154899, 0.384716183642255,
      0.4360993443292574, 0.2819503278353713
    };
    intersect_conics(Q1, Q2, P, n);
    IS_TRUE(n == 4);
    for (int i = 0; i < 8; ++i) {
      IS_APPROX_EQUAL(P[i], Pgt[i]);
    }
  }
  {
    double Q1[] = {-3.86389, -3.86389, -0.863892, 3.86389, 1.86389, -0.931946};
    double Q2[] = {-0.863892, -3.86389, -3.86389, 1.86389, 3.86389, -0.931946};
    double Pgt[] = {
      0.4953756940073381, 0.1712914171040694,
      0.3847161836422552, 0.3847161836422554,
      0.2819503278353711, 0.2819503278353709,
      0.1712914171040692, 0.4953756940073383,
    };
    intersect_conics(Q1, Q2, P, n);
    IS_TRUE(n == 4);
    for (int i = 0; i < 8; ++i) {
      IS_APPROX_EQUAL(P[i], Pgt[i]);
    }
  }
}

void sym_adjoint_works() {
  arma::mat A = {
    {-3.9054858808827158, -2.0249640588540179, 1.9768166465789114},
    {-2.0249640588540179, -1.0499281177080348, 1.0249640588540174},
    {1.9768166465789114, 1.0249640588540174, -0.97681664657891109}
  };
  arma::mat B_gt = {
    {0.02496405885403097, -0.04814741227510622, 1.332267629550188e-14},
    {-0.04814741227510622, 0.09286043276635381, 1.509903313490213e-14},
    {1.332267629550188e-14, 1.509903313490213e-14, 4.174438572590589e-14}
  };
  arma::mat B = -sym_adjoint(A);
  for (int i = 0; i < 3; ++i) {
    for (int j = 0; j < 3; ++j) {
      IS_APPROX_EQUAL(B(i, j), B_gt(i, j));
    }
  }
}

void split_deg_conic_works() {
  arma::mat A1 = {
    {-3.863891729615847, -1.931945864807924, 1.931945864807924},
    {-1.931945864807924, -0.8638917296158474, 0.9319458648079236},
    {1.931945864807924, 0.9319458648079236, -0.9319458648079236}
  };
  arma::mat A2 = {
    {-0.8638917296158474, -1.931945864807924, 0.9319458648079236},
    {-1.931945864807924, -3.863891729615847, 1.931945864807924},
    {0.9319458648079236, 1.931945864807924, -0.9319458648079236}
  };
  arma::vec m_gt = {-3.905485880882716, -2.024964058853974, 1.672086548350409};
  arma::vec l_gt = {-3.905485880882716, -2.024964058854061, 2.281546744807413};
  arma::vec m, l;
  double root = 0.048147412275106216;
  IS_TRUE(split_deg_conic(A1 + root*A2, m, l));
  for (int i = 0; i < 3; ++i) {
    IS_APPROX_EQUAL(m[0], m_gt[0]);
    IS_APPROX_EQUAL(l[0], l_gt[0]);
  }
}

int main() {
  intersect_conics_works_1();
  intersect_conics_works_2();
  sym_adjoint_works();
  split_deg_conic_works();
}

// Local Variables:
// indent-tabs-mode: nil
// c-basic-offset: 2
// End:
