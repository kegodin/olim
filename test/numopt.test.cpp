#include <gtest/gtest.h>

#include "numopt.hpp"

TEST (numopt, test_qpe_baryplex) {
  double G[3], c[2], x[2];
  {
    G[0] = 1.322471807186778;
    G[1] = 0.6280482242356766;
    G[2] = 1.035762733269118;
    c[0] = -0.9821315257790478;
    c[1] = 0.6125112981669493;
    qpe_bary<2, 0>(G, c, x);
    ASSERT_DOUBLE_EQ(x[0], 0.0);
    ASSERT_DOUBLE_EQ(x[1], -0.5913625567833622);
  }
  {
    G[0] = 1.47348599296532;
    G[1] = 0.2469229037436705;
    G[2] = 1.607389213768347;
    c[0] = -0.9930190065496006;
    c[1] = 0.9749502248113115;
    qpe_bary<2, 1>(G, c, x);
    ASSERT_DOUBLE_EQ(x[0], 0.67392497199868);
    ASSERT_DOUBLE_EQ(x[1], 0.0);
  }
  {
    G[0] = 1.915991244131425;
    G[1] = 0.2318001081857179;
    G[2] = 1.424349039815375;
    c[0] = -0.1131775740682571;
    c[1] = 1.635999657278292;
    qpe_bary<2, 2>(G, c, x);
    ASSERT_NEAR(x[0], 1.022590186764985, 1e-14);
    ASSERT_NEAR(x[1], -0.0225901867649847, 1e-14);
  }
}

TEST (numopt, test_qpi_baryplex) {
  bool error;
  double G[3], c[2], x[2], x0[2];
  for (int i = 0; i < 2; ++i) {
    if (i == 0) {
      x0[0] = x0[1] = 1./3;
    } else if (i == 1) {
      x0[0] = x0[1] = 0.0;
    }
    {
      G[0] = 0.2112628430553416;
      G[1] = -0.07940709555574356;
      G[2] = 0.3649291141863665;
      c[0] = -0.7577919164988186;
      c[1] = -0.5639689170274268;
      qpi_bary<2>(G, c, x0, x, &error);
      ASSERT_FALSE(error);
      ASSERT_NEAR(x[0], 0.8682365591679995, 1e-14);
      ASSERT_NEAR(x[1], 0.1317634408320019, 1e-14);
    }
    {
      G[0] = 0.1766826028295286;
      G[1] = -0.007213173489582403;
      G[2] = 0.05466441540071013;
      c[0] = 0.3105083186004987;
      c[1] = -0.2494890644739389;
      qpi_bary<2>(G, c, x0, x, &error);
      ASSERT_FALSE(error);
      ASSERT_NEAR(x[0], -4.440892098500626e-16, 1e-14);
      ASSERT_NEAR(x[1], 1.000000000000005, 1e-14);
    }
    {
      G[0] = 0.1398731795628713;
      G[1] = 0.1443894097074687;
      G[2] = 0.590026471661948;
      c[0] = -0.4335920223056836;
      c[1] = 0.3426244665386499;
      qpi_bary<2>(G, c, x0, x, &error);
      ASSERT_FALSE(error);
      ASSERT_DOUBLE_EQ(x[0], 0.9999999999999999);
      ASSERT_DOUBLE_EQ(x[1], 0.0);
    }
    {
      G[0] = 0.7804349286530685;
      G[1] = 0.2283559117710858;
      G[2] = 0.6621076683127182;
      c[0] = 0.7147429038260958;
      c[1] = -0.2049660582997746;
      qpi_bary<2>(G, c, x0, x, &error);
      ASSERT_FALSE(error);
      ASSERT_DOUBLE_EQ(x[0], 0.0);
      ASSERT_DOUBLE_EQ(x[1], 0.309566054146601);
    }
    {
      G[0] = 0.03998793788429245;
      G[1] = -0.05131392089981251;
      G[2] = 0.6514644398464839;
      c[0] = 0.7172386513288385;
      c[1] = 1.630235289164729;
      qpi_bary<2>(G, c, x0, x, &error);
      ASSERT_FALSE(error);
      ASSERT_DOUBLE_EQ(x[0], 0.0);
      ASSERT_DOUBLE_EQ(x[1], 0.0);
    }
    {
      G[0] = 0.5996984878416955;
      G[1] = 0.07548854473125305;
      G[2] = 0.2674300462809748;
      c[0] = -0.1773751566188252;
      c[1] = -0.1960534878073328;
      qpi_bary<2>(G, c, x0, x, &error);
      ASSERT_FALSE(error);
      ASSERT_DOUBLE_EQ(x[0], 0.2109897300222737);
      ASSERT_DOUBLE_EQ(x[1], 0.6735450359435763);
    }
    {
      G[0] = 0.3049276224231295;
      G[1] = -0.09291529749962908;
      G[2] = 0.7381116255079654;
      c[0] = 0.8350881650726819;
      c[1] = -0.2437151403779522;
      qpi_bary<2>(G, c, x0, x, &error);
      ASSERT_FALSE(error);
      ASSERT_DOUBLE_EQ(x[0], 0.0);
      ASSERT_DOUBLE_EQ(x[1], 0.3301873753989831);
    }
    {
      G[0] = 0.9288870480671484;
      G[1] = 0.02769674842827917;
      G[2] = 0.7842908662640453;
      c[0] = -0.6668906707013855;
      c[1] = 0.1873310245789398;
      qpi_bary<2>(G, c, x0, x, &error);
      ASSERT_FALSE(error);
      ASSERT_DOUBLE_EQ(x[0], 0.71794592473764);
      ASSERT_DOUBLE_EQ(x[1], 0.0);
    }
    {
      G[0] = 0.3120932443331088;
      G[1] = 0.02057818018813667;
      G[2] = 0.7934063383956034;
      c[0] = 0.1000928331393225;
      c[1] = -0.5445289299905477;
      qpi_bary<2>(G, c, x0, x, &error);
      ASSERT_FALSE(error);
      ASSERT_DOUBLE_EQ(x[0], 0.0);
      ASSERT_DOUBLE_EQ(x[1], 0.6863178470336823);
    }
    {
      G[0] = 0.5111300221703463;
      G[1] = -0.1198364024041312;
      G[2] = 0.6875631691558609;
      c[0] = -2.138355269439939;
      c[1] = -0.8395887473366136;
      qpi_bary<2>(G, c, x0, x, &error);
      ASSERT_FALSE(error);
      ASSERT_NEAR(x[0], 1.00000000000001, 1e-14);
      ASSERT_NEAR(x[1], -8.881784197001252e-16, 1e-14);
    }
    {
      G[0] = 0.3893554705283445;
      G[1] = 0.03674457678209533;
      G[2] = 0.2702975814212062;
      c[0] = 1.098424617888623;
      c[1] = -0.2778719327876389;
      qpi_bary<2>(G, c, x0, x, &error);
      ASSERT_FALSE(error);
      ASSERT_NEAR(x[0], -4.440892098500626e-16, 1e-14);
      ASSERT_NEAR(x[1], 1.0, 1e-14);
    }
    {
      G[0] = 0.7925471686502944;
      G[1] = 0.2244581843371652;
      G[2] = 0.2128135976984587;
      c[0] = 0.2819840636705562;
      c[1] = 0.03347988224445142;
      qpi_bary<2>(G, c, x0, x, &error);
      ASSERT_FALSE(error);
      ASSERT_DOUBLE_EQ(x[0], 0.0);
      ASSERT_DOUBLE_EQ(x[1], 0.0);
    }
    {
      G[0] = 0.4667997832499873;
      G[1] = -0.0549440710750627;
      G[2] = 0.4482577903690077;
      c[0] = -1.75021236844679;
      c[1] = -0.2856509715953298;
      qpi_bary<2>(G, c, x0, x, &error);
      ASSERT_FALSE(error);
      ASSERT_NEAR(x[0], 1.000000000000002, 1e-14);
      ASSERT_NEAR(x[1], 6.661338147750939e-16, 1e-14);
    }
    {
      G[0] = 1.8107622845933866;
      G[1] = 0.85973167304062859;
      G[2] = 1.7194633460812576;
    }
  }
}

// TODO: we don't currently have a cost func that takes an arbitrary theta
// // TODO: we should convert these to only check if the minima are the
// // same, not if the minimizing arguments are the same
// TEST (numopt, test_sqp_baryplex) {
//   bool error;
//   double u[3], h, s_hat, s[3], theta, x[2], xgt[2], p[3][3], U, U_gt;
//   {
//     u[0] = 0.1233189348351655;
//     u[1] = 0.1839077882824167;
//     u[2] = 0.2399525256649028;
//     h = 0.4172670690843695;
//     s_hat = 0.04965443032574213;
//     s[0] = 0.9027161099152811;
//     s[1] = 0.944787189721646;
//     s[2] = 0.4908640924680799;
//     theta = 0.4892526384000189;
//     xgt[0] = 5.551115123125783e-17;
//     xgt[1] = 0.3114411411773382;
//     p[0][0] = -0.7981635845641424;
//     p[0][1] = 1.018685282128575;
//     p[0][2] = -0.1332174795077347;
//     p[1][0] = -0.7145301637871584;
//     p[1][1] = 1.351385768426657;
//     p[1][2] = -0.2247710560525841;
//     p[2][0] = -0.5890290307208013;
//     p[2][1] = -0.2937535977354161;
//     p[2][2] = -0.8479262436379339;
//     F0_wkspc<3, 2> func {h, theta};
//     func.set_args(u, s_hat, s, p);
//     numopt::sqp_baryplex<F0<3, 2>, 3, 2>()(func, x, &error);
//     ASSERT_FALSE(error);
//     ASSERT_NEAR(x[0], xgt[0], 1e-14);
//     ASSERT_NEAR(x[1], xgt[1], 3.5e-11);
//   }
//   {
//     u[0] = 0.6240600881736895;
//     u[1] = 0.6791355408657477;
//     u[2] = 0.395515215668593;
//     h = 0.3674366485444766;
//     s_hat = 0.9879820031616328;
//     s[0] = 0.03773886623955214;
//     s[1] = 0.8851680082024753;
//     s[2] = 0.913286827639239;
//     theta = 0.796183873585212;
//     xgt[0] = 0.1609665771445731;
//     xgt[1] = 0.8390334228554269;
//     p[0][0] = -1.66416447498706;
//     p[0][1] = -0.5900345642052215;
//     p[0][2] = -0.2780641637653093;
//     p[1][0] = 0.4227156912204783;
//     p[1][1] = -1.67020069785047;
//     p[1][2] = 0.4716343264163027;
//     p[2][0] = -1.212847199674459;
//     p[2][1] = 0.06619004842461142;
//     p[2][2] = 0.652355888661374;
//     F0<3, 2> func {h, theta};
//     func.set_args(u, s_hat, s, p);
//     numopt::sqp_baryplex<decltype(func), 3, 2>()(func, x, &error);
//     ASSERT_FALSE(error);
//     ASSERT_DOUBLE_EQ(x[0], xgt[0]);
//     ASSERT_DOUBLE_EQ(x[1], xgt[1]);
//   }
//   {
//     u[0] = 0.7150370784006941;
//     u[1] = 0.9037205605563163;
//     u[2] = 0.8909225043307892;
//     h = 0.3341630527374962;
//     s_hat = 0.6987458323347945;
//     s[0] = 0.1978098266859292;
//     s[1] = 0.03054094630463666;
//     s[2] = 0.7440742603674624;
//     theta = 0.5000224355902009;
//     xgt[0] = 4.930380657631324e-32;
//     xgt[1] = 0.4886902117153741;
//     p[0][0] = -0.0549189146094067;
//     p[0][1] = 0.9111272656538598;
//     p[0][2] = 0.5945836974090524;
//     p[1][0] = 0.3502011738745352;
//     p[1][1] = 1.250251228304996;
//     p[1][2] = 0.9297894585577157;
//     p[2][0] = 0.23976325705858;
//     p[2][1] = -0.6903611031112258;
//     p[2][2] = -0.651553641750281;
//     F0<3, 2> func {h, theta};
//     func.set_args(u, s_hat, s, p);
//     numopt::sqp_baryplex<decltype(func), 3, 2>()(func, x, &error);
//     ASSERT_FALSE(error);
//     ASSERT_NEAR(x[0], xgt[0], 1e-14);
//     ASSERT_NEAR(x[1], xgt[1], 1.3e-13);
//   }
//   {
//     u[0] = 0.8865119330761013;
//     u[1] = 0.0286741524641061;
//     u[2] = 0.4899013885122239;
//     h = 0.1679271456822568;
//     s_hat = 0.9786806496411588;
//     s[0] = 0.7126944716789141;
//     s[1] = 0.500471624154843;
//     s[2] = 0.4710883745419393;
//     theta = 0.05961886757963919;
//     xgt[0] = 1.000000000000001;
//     xgt[1] = -8.881784197001252e-16;
//     p[0][0] = 0.5811723226759228;
//     p[0][1] = -2.192434919965905;
//     p[0][2] = -2.319280306643302;
//     p[1][0] = 0.07993371029843969;
//     p[1][1] = -0.9484809835705053;
//     p[1][2] = 0.4114906214233742;
//     p[2][0] = 0.6769778056840295;
//     p[2][1] = 0.8577325452053552;
//     p[2][2] = -0.6911591253829914;
//     F0<3, 2> func {h, theta};
//     func.set_args(u, s_hat, s, p);
//     numopt::sqp_baryplex<decltype(func), 3, 2>()(func, x, &error);
//     ASSERT_FALSE(error);
//     ASSERT_NEAR(x[0], xgt[0], 1e-14);
//     ASSERT_NEAR(x[1], xgt[1], 1e-14);
//   }
//   {
//     u[0] = 0.6596052529083072;
//     u[1] = 0.5185949425105382;
//     u[2] = 0.9729745547638625;
//     U_gt = 0.961440337567651;
//     h = 0.6489914927123561;
//     s_hat = 0.8003305753524015;
//     s[0] = 0.4537977087269195;
//     s[1] = 0.4323915037834617;
//     s[2] = 0.8253137954020456;
//     theta = 0.08346981485891403;
//     p[0][0] = -0.5045864055140099;
//     p[0][1] = -1.27059444980866;
//     p[0][2] = -0.3825848027076484;
//     p[1][0] = 0.6486792620486207;
//     p[1][1] = 0.8257271492417582;
//     p[1][2] = -1.014943642680137;
//     p[2][0] = -0.4710699126831666;
//     p[2][1] = 0.1370248741300503;
//     p[2][2] = -0.2918633757535734;
//     F0<3, 2> func {h, theta};
//     func.set_args(u, s_hat, s, p);
//     numopt::sqp_baryplex<decltype(func), 3, 2>()(func, x, &error);
//     func.set_lambda(x);
//     func.eval(U);
//     ASSERT_FALSE(error);
//     ASSERT_NEAR(U, U_gt, 1e-14);
//   }
//   {
//     u[0] = 0.683363243294653;
//     u[1] = 0.5465931145903228;
//     u[2] = 0.4257288418711879;
//     U_gt = 0.652033401191350;
//     h = 0.6444427814313365;
//     s_hat = 0.6476176301726844;
//     s[0] = 0.6790167540932019;
//     s[1] = 0.6357867105140836;
//     s[2] = 0.9451741131094014;
//     theta = 0.2089349224260229;
//     p[0][0] = 0.7595683259147834;
//     p[0][1] = -0.6572012990983503;
//     p[0][2] = -0.6039184813761692;
//     p[1][0] = 0.1769468223294113;
//     p[1][1] = -0.3075034698627506;
//     p[1][2] = -0.1318203529158936;
//     p[2][0] = 0.5953576738841018;
//     p[2][1] = 1.046832784305232;
//     p[2][2] = -0.197958632611842;
//     F0<3, 2> func {h, theta};
//     func.set_args(u, s_hat, s, p);
//     numopt::sqp_baryplex<decltype(func), 3, 2>()(func, x, &error);
//     func.set_lambda(x);
//     func.eval(U);
//     ASSERT_FALSE(error);
//     ASSERT_NEAR(U, U_gt, 1e-14);
//   }
//   {
//     u[0] = 0.6877960851201071;
//     u[1] = 0.3592282104018606;
//     u[2] = 0.7363400743012017;
//     h = 0.3947074752787632;
//     s_hat = 0.6834158669679784;
//     s[0] = 0.704047430334266;
//     s[1] = 0.4423054133833708;
//     s[2] = 0.01957762355331871;
//     theta = 0.330857880214071;
//     xgt[0] = 0.2848709161846956;
//     xgt[1] = 0.2826355402888566;
//     p[0][0] = -0.2700688126480988;
//     p[0][1] = -0.4381413556021437;
//     p[0][2] = -0.4086743147963257;
//     p[1][0] = 0.9835452352055563;
//     p[1][1] = -0.297697144009373;
//     p[1][2] = 1.143678910770958;
//     p[2][0] = -0.5316201175070693;
//     p[2][1] = 0.9725657280086532;
//     p[2][2] = -0.5222504849935489;
//     F0<3, 2> func {h, theta};
//     func.set_args(u, s_hat, s, p);
//     numopt::sqp_baryplex<decltype(func), 3, 2>()(func, x, &error);
//     ASSERT_FALSE(error);
//     ASSERT_NEAR(x[0], xgt[0], 3.5e-13);
//     ASSERT_NEAR(x[1], xgt[1], 7.7e-14);
//   }
//   {
//     u[0] = 0.5312092935824387;
//     u[1] = 0.1088179382730454;
//     u[2] = 0.6317663735284889;
//     h = 0.1264998653293029;
//     s_hat = 0.1343033043135746;
//     s[0] = 0.09859409271099773;
//     s[1] = 0.1420272484319284;
//     s[2] = 0.1682512984915278;
//     theta = 0.1962489222569553;
//     xgt[0] = 0.9999999999999996;
//     xgt[1] = -1.4210854715202e-14;
//     p[0][0] = -0.2856861376018336;
//     p[0][1] = -0.4624215443537469;
//     p[0][2] = -0.4097852147401654;
//     p[1][0] = -0.5035389841318734;
//     p[1][1] = 1.233297112644135;
//     p[1][2] = 0.6103052175739498;
//     p[2][0] = 0.05907215505265444;
//     p[2][1] = -1.466946730428247;
//     p[2][2] = -1.625803266396234;
//     F0<3, 2> func {h, theta};
//     func.set_args(u, s_hat, s, p);
//     numopt::sqp_baryplex<decltype(func), 3, 2>()(func, x, &error);
//     ASSERT_FALSE(error);
//     ASSERT_NEAR(x[0], xgt[0], 1e-14);
//     ASSERT_NEAR(x[1], xgt[1], 1.43e-14);
//   }
//   {
//     u[0] = 0.0773468081126768;
//     u[1] = 0.9138004107795679;
//     u[2] = 0.7067152176969306;
//     h = 0.5577889667548762;
//     s_hat = 0.3134289899365913;
//     s[0] = 0.1662035629021507;
//     s[1] = 0.6224972592798952;
//     s[2] = 0.9879347349524954;
//     theta = 0.1704320230568833;
//     xgt[0] = 0;
//     xgt[1] = 0;
//     p[0][0] = -0.4493973598602503;
//     p[0][1] = -0.08429207275342081;
//     p[0][2] = -1.991997177603269;
//     p[1][0] = 0.8412456663525811;
//     p[1][1] = -0.4146589174554855;
//     p[1][2] = 1.912180838363861;
//     p[2][0] = -0.3908987322337722;
//     p[2][1] = 0.4091820825473549;
//     p[2][2] = -1.142428168121445;
//     F0<3, 2> func {h, theta};
//     func.set_args(u, s_hat, s, p);
//     numopt::sqp_baryplex<decltype(func), 3, 2>()(func, x, &error);
//     ASSERT_FALSE(error);
//     ASSERT_DOUBLE_EQ(x[0], xgt[0]);
//     ASSERT_DOUBLE_EQ(x[1], xgt[1]);
//   }
// }
